#ifndef _EVENT_H_
#define _EVENT_H_

#include <stdio.h>

typedef signed int sint32;
typedef unsigned int uint32;
typedef signed short int sshort16;
typedef unsigned short int ushort16;



/******************************************************************************
 * 函数介绍: 创建EVENT
 * 输入参数: 无
 * 输出参数: 无
 * 返回值  : <0-失败,>0-EVENT句柄
 *****************************************************************************/
sint32 event_open(void);

/******************************************************************************
 * 函数介绍: 接收事件
 * 输入参数: handle: 事件句柄
 *           want: 欲接收的event
 * 输出参数: events: 接收到的事件消息
 * 返回值  : <0-失败,0-成功
 *****************************************************************************/
sint32 event_recv(sint32 handle, sint32 want,int timeout, sint32 * events);

/******************************************************************************
 * 函数介绍: 等待事件
 * 输入参数: handle: 事件句柄
 *           want: 欲接收的event
 * 输出参数: events: 接收到的事件消息
 * 返回值  : <0-失败,0-成功
 *****************************************************************************/
sint32 event_wait(sint32 handle, sint32 want,int timeout, sint32 * events);

/******************************************************************************
 * 函数介绍: 发送事件
 * 输入参数: event: 事件句柄
 * 输出参数: events: 待发送事件
 * 返回值  : <0-失败,0-成功
 *****************************************************************************/
sint32 event_post(sint32 handle, sint32 events);

/******************************************************************************
 * 函数介绍: EVENT配置
 * 输入参数: handle: EVENT句柄;
 *           cmd: 命令;
 *           channel: 通道号,此处无效
 *           param: 输入参数
 *           param_len: param长度,特别对于GET命令时,输出参数应先判断缓冲区是否足够
 * 输出参数: param: 输出参数
 * 返回值  : 0-成功,<0-错误代码
 *****************************************************************************/
sint32 event_ioctrl(sint32 handle, sint32 cmd, sint32 channel, sint32 * param, sint32 param_len);

/******************************************************************************
 * 函数介绍: 销毁事件,释放资源
 * 输入参数: event: 事件句柄
 * 输出参数: 无
 * 返回值  : <0-失败,0-成功
 *****************************************************************************/
sint32 event_close(sint32 handle);

#endif /* _EVENT_H_ */

